#!/usr/bin/env ruby

require "octokit"
require "json"
require "thor"

class Vacation < Thor
  desc "depart [FILE]", "Write to FILE and ignore all currently watched repos"
  def depart(file)
    setup

    # Fetch subscriptions
    repos = []
    @client.subscriptions.each do |repo|
      subscription = @client.subscription(repo.full_name)
      repos << {
        "full_name": repo.full_name,
        "ignored": subscription.ignored,
        "subscribed": subscription.subscribed
      }
    end

    # Write to Vacationfile
    data = { "subscriptions": repos }
    f = File.open(file, "w")
    f.write(JSON.pretty_generate(data))
    f.close

    # Ignore repositories
    repos.each do |repo|
      @client.update_subscription(repo[:full_name], {
        "subscribed": false,
        "ignored": true
      })
    end
  end

  desc "return [FILE]", "Read from FILE and re-watch repos"
  def return(file)
    setup

    # Read from Vacationfile
    raw = File.open(file, "r").read
    json = JSON.parse(raw)

    # Resubscribe repositories
    json["subscriptions"].each do |repo|
      @client.update_subscription(repo["full_name"], {
        "subscribed": repo["subscribed"],
        "ignored": repo["ignored"]
      })
    end
  end

  private

  def setup
    begin
      access_token = ENV.fetch("GITHUB_TOKEN")
      api_endpoint = ENV.fetch("GITHUB_API_ENDPOINT")
    rescue KeyError
      $stderr.puts "Please set the following environment variables:"
      $stderr.puts "- GITHUB_TOKEN: A valid personal access token with Organzation admin priviliges"
      $stderr.puts "- GITHUB_API_ENDPOINT: A valid GitHub/GitHub Enterprise API endpoint URL"
      exit 1
    end

    Octokit.configure do |kit|
      kit.api_endpoint = api_endpoint
      kit.access_token = access_token
      kit.auto_paginate = true
    end

    @client = Octokit::Client.new
  end
end

Vacation.start(ARGV)
